var documenterSearchIndex = {"docs":
[{"location":"cqdbase/","page":"Base","title":"Base","text":"CurrentModule = CQDBase","category":"page"},{"location":"cqdbase/#CQDBase","page":"Base","title":"CQDBase","text":"","category":"section"},{"location":"cqdbase/","page":"Base","title":"Base","text":"Modules = [CQDBase]\nPrivate = true","category":"page"},{"location":"cqdbase/#CQDBasics.CQDBase","page":"Base","title":"CQDBasics.CQDBase","text":"This module defines important structures and functions for CQD simulations. These can be used for different approaches, including the original CQD simulation with BE, or the Wigner d Majorana simulation with BE.\n\nAuthor: Xukun Lin\n\nUpdate: 10/25/2024\n\nRequired packages: \"Pkg\", \"LinearAlgebra\", \"Dates\", \"Statistics\", \"Logging\", \"StatsBase\", \"DifferentialEquations\", \"ODEInterfaceDiffEq\", \"Plots\", \"DataStructures\", \"DataFrames\", \"CSV\", \"LaTeXStrings\", \"JSON3\", \"Rotations\", \"WignerD\".\n\n\n\n\n\n","category":"module"},{"location":"cqdbase/#CQDBasics.CQDBase.Experiment","page":"Base","title":"CQDBasics.CQDBase.Experiment","text":"struct Experiment\n\nAn Experiment represents the experiment to simulate.\n\nFields\n\nname::String: The name of the experiment. Predefined experiment names are \"FS Low $z_a$\", and \"FS High $z_a$\", \"Alex 165\", \"Alex 156\", \"Alex 396\", \"Alex 105\". For predefined experiments, use Experiment(name).\ncurrents::Vector{<:Real}: The wire currents.\nflip_probabilities::Vector{<:Real}: The (mean) flip probabilities from the experiment.\nflip_probabilities_stds::Vector{<:Real}: The standard deviations of the flip probabilities.\nqm_flip_probabilities::Vector{<:Real}: The flip probabilities according to QM simulation.\nzₐ::Real: The distance from the beam to the null point.\nv::Real: The velocity of the atomic beam.\nBᵣ::Vector{<:Real}: The remnant field.\nsystem_length::Real: The length of the system.\ntime_span::Tuple{<:Real, <:Real}: The flight time range for the atoms.\n\n\n\n\n\n","category":"type"},{"location":"cqdbase/#CQDBasics.CQDBase.Experiment-Tuple{String}","page":"Base","title":"CQDBasics.CQDBase.Experiment","text":"Experiment(name::String)\n\nOuter constructor for Experiment that takes a predefined experiment name.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.Results","page":"Base","title":"CQDBasics.CQDBase.Results","text":"struct Results\n\nA Results represents the results of the simulation.\n\nFields\n\nraw_data::BitArray: The raw simulation data of whether the atoms flip.\nflip_probabilities::Vector{<:Real}: The flip probability calculated from the simulation.\nflip_probabilities_stds::Vector{<:Real}: The standard deviations of the calculated flip probabilities.\nR2::Real: The R sqaure value calculated from the simulation and experiment.\nθₑ_plot::Plots.Plot: The plot of θₑ dynamics.\nθₙ_plot::Plots.Plot: The plot of θₙ dynamics.\nθₑθₙ_plot::Plots.Plot: The plot that combines the two θ plots.\nflip_plot::Plots.Plot: The plot of the simulation and experiment flip probabilities.\n\n\n\n\n\n","category":"type"},{"location":"cqdbase/#CQDBasics.CQDBase.Results-Tuple{Experiment, Simulation, BitArray, Plots.Plot, Plots.Plot, Plots.Plot}","page":"Base","title":"CQDBasics.CQDBase.Results","text":"Results(experiment::Experiment, simulation::Simulation, raw_data::BitArray, θₑ_plot::Plots.Plot, θₙ_plot::Plots.Plot, θₑθₙ_plot::Plots.Plot)\n\nOuter constructor for Results.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.Simulation","page":"Base","title":"CQDBasics.CQDBase.Simulation","text":"struct Simulation\n\nA Simulation represents a particular simulation setup.\n\nFields\n\ntype::String: The type of simulation. Choose from BE and WM.\natom_number::Int: The number of atoms.\nmagnetic_field_computation_method::String: The method used for calculating the magnetic field due to the wire. Choose from \"quadrupole\" and \"exact\".\ninitial_μₑ::Union{String, Real}: The initial condition for the electron magnetic moments. Choose from \"up\", \"down\", 1/2, or -1/2.\ninitial_μₙ::Union{String, Vector{<:Real}}: The sampling method for nuleus magnetic moments. Choose from \"HS\", \"HS 2\", \"HS 4\", \"IHS\", \"IHS 2\", \"IHS 4\", \"Iso\", \"Iso 2\", \"Iso 4\", or give a vector of probability weights. The vector should be of length 2 or 4.\nsolver::String: The differential equation solver. Several good ones are \"radau\", \"radau5\", \"RadauIIA5\", and \"TRBDF2\".\nθₙ_is_fixed::Bool: Whether θₙ is fixed or not.\nbranching_condition::String: Which branching condition to use. Choose from \"B₀ dominant\" and \"Bₑ dominant\".\nBₙBₑ_strength::String: The values for Bₙ and Bₑ. Choose from \"CQD\" and \"quantum\".\nBₙBₑ_ratio::Tuple{<:Real, <:Real}: The ratio of the used Bₙ and Bₑ to the theory value.\nkᵢ::Real: The collapse coefficient.\naverage_method::Union{String, Tuple{String, <:Real}}: The average method. Choose from \"ABC\" (average angles then branching condition), \"BCA\" (branching conditions averaged), and \"no average\". If using \"ABC\" or \"BCA\", the input should be a tuple of length 2, where the second entry is the fraction of total time to be averaged. For example, average_method = (\"ABC\", 1/16).\nθ_cross_detection::Union{String, Tuple{String, <:Real, <:Real}, Tuple{String, <:Real, String}} (currently disabled): Whether angle cross is automatically detected. Choose from \"off\", \"sign\", and \"minabs\". If using \"sign\" or \"minabs\", the input should be a tuple of length 3, where the second entry is the start time for detection, and the third entry is the period for detection. The period may be a fixed value or \"adaptive\". For example, θ_cross_detection = (\"sign\", 10e-6, 4.5e-6).\nsigmoid_field::Union{String, Tuple{<:Real, <:Real}}: Whether use a sigmoid transition field. Give either \"off\" or a tuple of length 2, where the first entry is the magnetic field strength, and the second entry is the y coordinate of the SG apparatus. For example, sigmoid_field = (0.1, 2e-2).\nR2_comparison::String: How to calculate R2. Choose from \"experiment\" and \"qm\".\nsave_files::Union{String, Vector{String}}: Which files to save. Choose from \"θₑ plot\", \"θₙ plot\", \"θₑ θₙ plot\", \"flip plot\", \"raw data\", \"flip probabilities\", \"CQDBase.jl\", \"simulation info\", and \"package info\".\n\n\n\n\n\n","category":"type"},{"location":"cqdbase/#CQDBasics.CQDBase.CQD_LLG_equation!-NTuple{4, Any}","page":"Base","title":"CQDBasics.CQDBase.CQD_LLG_equation!","text":"CQD_LLG_equation!(du, u, p, t)\n\nDefine the differential equation using CQD LLG equations.\n\nArguments\n\nu = [θₑ, θₙ, ϕₑ, ϕₙ]: The variable of the differential equation. p = [experiment::Experiment, simulation::Simulation, current, Bₙ, Bₑ]: The parameters passed to the solver.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.apply_branching-Tuple{Union{Real, Vector{<:Real}}, Union{Real, Vector{<:Real}}, Union{Real, Vector{<:Real}}, Union{Real, Vector{<:Real}}, Real, Simulation}","page":"Base","title":"CQDBasics.CQDBase.apply_branching","text":"apply_branching(θₑs::Union{Real, Vector{<:Real}}, θₙs::Union{Real, Vector{<:Real}}, ϕₑs::Union{Real, Vector{<:Real}}, ϕₙs::Union{Real, Vector{<:Real}}, mᵢ::Real, simulation::Simulation)\n\nApply the branching conditions based on the simulation parameters.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.apply_branching-Tuple{Union{Real, Vector{<:Real}}, Union{Real, Vector{<:Real}}, Union{Real, Vector{<:Real}}, Union{Real, Vector{<:Real}}, Real, String, Union{Real, String}, Union{String, Vector{<:Real}}, String}","page":"Base","title":"CQDBasics.CQDBase.apply_branching","text":"apply_branching(θₑs::Union{Real, Vector{<:Real}}, θₙs::Union{Real, Vector{<:Real}}, ϕₑs::Union{Real, Vector{<:Real}}, ϕₙs::Union{Real, Vector{<:Real}}, mᵢ::Real, type::String, initial_μₑ::Union{String, Real}, initial_μₙ::Union{String, Vector{<:Real}}, branching_condition::String)\n\nApply the branching conditions for one atom. The angles may be vectors of the same size, but the angles must belong to the same atom, possibily obtained at different time points.\n\nmᵢ is used if and only if type=\"WM\".\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.cartesian_to_spherical-Tuple{Real, Real, Real}","page":"Base","title":"CQDBasics.CQDBase.cartesian_to_spherical","text":"cartesian_to_spherical(x::Real, y::Real, z::Real)\n\nConvert Cartesian coordinates (x, y, z) to spherical coordinates (r, θ, ϕ).\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.get_external_magnetic_fields-Tuple{Real, Real, Experiment, Simulation}","page":"Base","title":"CQDBasics.CQDBase.get_external_magnetic_fields","text":"get_external_magnetic_fields(t::Real, current::Real, experiment::Experiment, simulation::Simulation)\n\nCalculate the external magnetic field components Bx, By, Bz at a given time t and return a tuple.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.get_external_magnetic_fields-Tuple{Union{Real, Tuple{Real, Real}}, Real, Real, Vector{<:Real}, String, Union{String, Tuple{Real, Real}}}","page":"Base","title":"CQDBasics.CQDBase.get_external_magnetic_fields","text":"get_external_magnetic_fields(position::Union{Real, Tuple{<:Real, <:Real}}, current::Real, zₐ::Real, Bᵣ::Vector{<:Real}, magnetic_field_computation_method::String, sigmoid_field::Union{String, Tuple{<:Real, <:Real}})\n\nCalculate the external magnetic field components Bx, By, Bz at a given position position and return a tuple. position may be a tuple of the form (time, speed), (velocity, speed), or a real number y.\n\nNotes\n\n+y is right, +z is up, +x is out of page.\nDue to a different definition of the sign of current, the expressions have an extra minus sign.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.get_external_magnetic_fields_at_ends-Tuple{Real, Experiment, Simulation}","page":"Base","title":"CQDBasics.CQDBase.get_external_magnetic_fields_at_ends","text":"get_external_magnetic_fields_at_ends(current::Real, experiment::Experiment, simulation::Simulation)\n\nCalculate the external magnetic field components at the two ends of the flipper.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.get_perpendicular_norm_vector-Tuple{Vector{<:Real}}","page":"Base","title":"CQDBasics.CQDBase.get_perpendicular_norm_vector","text":"get_perpendicular_norm_vector(v::Vector{<:Real})\n\nFind one normalized vector that is perpendicular to v.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.get_solver-Tuple{String}","page":"Base","title":"CQDBasics.CQDBase.get_solver","text":"get_solver(name::String)\n\nGet the solver corresponding to the name.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.is_flipped-Tuple{Union{Vector{<:Real}, Vector{<:Vector{<:Real}}}, Real, Real, Experiment, Simulation}","page":"Base","title":"CQDBasics.CQDBase.is_flipped","text":"is_flipped(angles::Union{Vector{<:Real}, Vector{<:Vector{<:Real}}}, mᵢ::Real, current::Real, experiment::Experiment, simulation::Simulation)\n\nDetermine whether an atom has flipped based on the simulation parameters.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.is_flipped-Tuple{Union{Vector{<:Real}, Vector{<:Vector{<:Real}}}, Real, Tuple{Real, Real, Real}, Tuple{Real, Real, Real}, String, Union{Real, String}, Union{String, Vector{<:Real}}, String}","page":"Base","title":"CQDBasics.CQDBase.is_flipped","text":"is_flipped(angles::Union{Vector{<:Real}, Vector{<:Vector{<:Real}}}, mᵢ::Real, B_start::Tuple{<:Real, <:Real, <:Real}, B_end::Tuple{<:Real, <:Real, <:Real}, type::String, initial_μₑ::Union{String, Real}, initial_μₙ::Union{String, Vector{<:Real}}, branching_condition::String)\n\nDetermine whether an atom has flipped based on the input parameters. The result can be a vector, which is for only one atom but at different time points.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.latex_exponential-Tuple{Real}","page":"Base","title":"CQDBasics.CQDBase.latex_exponential","text":"latex_exponential(x::Real)\n\nConvert a number x to a beautiful scientific-notation latex string.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.sample_atom_once-Tuple{Simulation}","page":"Base","title":"CQDBasics.CQDBase.sample_atom_once","text":"sample_atom_once(simulation::Simulation)\n\nSample one atom based on the simulation parameters.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.sample_atom_once-Tuple{Tuple{Real, Real}, String, Union{Real, String}, Union{String, Vector{<:Real}}}","page":"Base","title":"CQDBasics.CQDBase.sample_atom_once","text":"sample_atom_once(BₙBₑ_ratio::Tuple{<:Real, <:Real}, BₙBₑ_strength::String, initial_μₑ::Union{String, Real}, initial_μₙ::Union{String, Vector{<:Real}})\n\nSample one atom based on the input parameters.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.sample_atoms-Tuple{Simulation}","page":"Base","title":"CQDBasics.CQDBase.sample_atoms","text":"sample_atoms(simulation::Simulation)\n\nSample atoms according to the simulation parameters.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.sample_atoms-Tuple{Tuple{Real, Real}, String, Union{Real, String}, Union{String, Vector{<:Real}}, Int64}","page":"Base","title":"CQDBasics.CQDBase.sample_atoms","text":"sample_atoms(BₙBₑ_ratio::Tuple{<:Real, <:Real}, BₙBₑ_strength::String, initial_μₑ::Union{String, Real}, initial_μₙ::Union{String, Vector{<:Real}}, atom_number::Int64)\n\nSample atoms according to the input parameters and the number of atoms.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.save_results-Tuple{Experiment, Simulation, Results, Any, Any}","page":"Base","title":"CQDBasics.CQDBase.save_results","text":"save_results(experiment::Experiment, simulation::Simulation, results::Results, start_time, file_dir)\n\nSave the results of the whole simulation.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.simulate-Tuple{Experiment, Simulation, Bool}","page":"Base","title":"CQDBasics.CQDBase.simulate","text":"simulate(experiment::Experiment, simulation::Simulation, show_time::Bool)\n\nSimulate the whole system.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.spherical_to_cartesian-Tuple{Real, Real, Real}","page":"Base","title":"CQDBasics.CQDBase.spherical_to_cartesian","text":"spherical_to_cartesian(r::Real, θ::Real, ϕ::Real)\n\nConvert spherical coordinates (r, θ, ϕ) to Cartesian coordinates (x, y, z).\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.transform_angles-Tuple{Union{Real, Vector{<:Real}}, Union{Real, Vector{<:Real}}, Vector{<:Real}, Vector{<:Real}}","page":"Base","title":"CQDBasics.CQDBase.transform_angles","text":"transform_angles(θ::Union{Real, Vector{<:Real}}, ϕ::Union{Real, Vector{<:Real}}, z₁::Vector{<:Real}, z₂::Vector{<:Real})\n\nExpress θ and ϕ, which are defined in the z₁ spherical coordinates, in the z₂ spherical coordinates.\n\nNotes\n\nThere are infinitly many possible rotations. Here only the simpliest case is considered.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.transform_vectors-Tuple{Union{Vector{<:Vector{<:Real}}, Vector{<:Real}}}","page":"Base","title":"CQDBasics.CQDBase.transform_vectors","text":"transform_vectors(vectors::Union{Vector{Vector{<:Real}}, Vector{<:Real}})\n\nTransform a vector (length M) of vectors (length N) to a vector of length N with elements of length M.\n\nIf the input is a vector but not a vector of vectors, return the vector itself.\n\n\n\n\n\n","category":"method"},{"location":"cqdbase/#CQDBasics.CQDBase.wrap-Tuple{Any}","page":"Base","title":"CQDBasics.CQDBase.wrap","text":"wrap(θ)\n\nWrap the angle θ to between 0 and π.\n\n\n\n\n\n","category":"method"},{"location":"cqddataanalysisbase/","page":"Data Analysis Base","title":"Data Analysis Base","text":"CurrentModule = CQDDataAnalysisBase","category":"page"},{"location":"cqddataanalysisbase/#CQDDataAnalysisBase","page":"Data Analysis Base","title":"CQDDataAnalysisBase","text":"","category":"section"},{"location":"cqddataanalysisbase/","page":"Data Analysis Base","title":"Data Analysis Base","text":"Modules = [CQDDataAnalysisBase]\nPrivate = true","category":"page"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase","text":"This module defines functions that analyze results from CQDBase simulations.\n\nAuthor: Xukun Lin\n\nUpdate: 10/25/2024\n\nRequired packages: \"JSON3\", \"Plots\", \"LaTeXStrings\", \"DataFrames\", \"XLSX\".\n\n\n\n\n\n","category":"module"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase.categorize_folders-Tuple{String, Union{String, Tuple{Vararg{String}}}}","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase.categorize_folders","text":"categorize_folders(directory::String, fields::Union{String, Tuple{Vararg{String}}})\n\nDivide all folders in directory into groups according to the fields. Then for each group, create a new folder in directory and move the group into it.\n\n\n\n\n\n","category":"method"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase.clean_folders-Tuple{String, Bool}","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase.clean_folders","text":"clean_folders(directory::String, save_original::Bool)\n\nClean the contents of folders in directory for faster upload / download.\n\nNote that if you are using other functions from CQDDataAnalysisBase.jl in the folder dir, then the input for this function should be dirname(dir).\n\n\n\n\n\n","category":"method"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase.combine_excels-Tuple{String, String, Int64}","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase.combine_excels","text":"combine_excels(directory::String, sheet_name::String, column_for_average::Int64)\n\nCombine all excel .xlsx files in directory. All excel files are supposed to have sheets with name sheet_name, and the column heads are supposed to be identical. For rows that have identical values for all columns but column #column_for_average, their values in column #column_for_average are averaged.\n\n\n\n\n\n","category":"method"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase.get_kᵢ_plots-Tuple{String}","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase.get_kᵢ_plots","text":"get_kᵢ_plots(directory::String)\n\nPlot the data from the folders within the directory.\n\n\n\n\n\n","category":"method"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase.get_subfolder_summary_tables-Tuple{String}","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase.get_subfolder_summary_tables","text":"get_subfolder_summary_tables(directory::String)\n\nFor each folder in directory, create an Excel file that contains Max-R2-ranked configurations.\n\n\n\n\n\n","category":"method"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase.sort_folders-Tuple{String}","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase.sort_folders","text":"sort_folders(directory::String)\n\nSort folders in directory based on the max R2 value.\n\n\n\n\n\n","category":"method"},{"location":"cqddataanalysisbase/#CQDBasics.CQDDataAnalysisBase.unpack_folders-Tuple{String}","page":"Data Analysis Base","title":"CQDBasics.CQDDataAnalysisBase.unpack_folders","text":"unpack_folders(directory::String)\n\nFor each folder in directory, move all subfolders out of it and delete the folder. Files in the folder that are not directories are deleted.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CQDBasics","category":"page"},{"location":"#CQDBasics","page":"Home","title":"CQDBasics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CQDBasics.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In a Julia session, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add(url=\"https://github.com/XK-Lin/CQDBasics.jl\")","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Examples are in /examples.","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [CQDBasics]","category":"page"},{"location":"#CQDBasics.CQDBasics","page":"Home","title":"CQDBasics.CQDBasics","text":"This module wraps CQDBase.jl, CQDDataAnalysisBase.jl, and QuantumMechanics.jl.\n\nAuthor: Xukun Lin\n\nUpdate: 10/25/2024\n\nRequired package (in addition to those required by wrapped modules): \"Reexport\".\n\n\n\n\n\n","category":"module"},{"location":"#CQDBasics.get_quantum_mechanics_results-Tuple{Experiment, Union{Float64, String}, String, Union{String, Tuple{Real, Real}}, Bool}","page":"Home","title":"CQDBasics.get_quantum_mechanics_results","text":"get_quantum_mechanics_results(experiment::Experiment, initial_state::Union{String, Float64}, magnetic_field_computation_method::String, sigmoid_field::Union{String, Tuple{<:Real, <:Real}}, show_plot::Bool)\n\nCalculate the quantum mechanical predictions of the spin flip probabilities.\n\n\n\n\n\n","category":"method"},{"location":"#CQDBasics.see_magnetic_fields-Tuple{Tuple{Real, Real}, Real, Real, Vector{<:Real}, String, Union{String, Tuple{Real, Real}}}","page":"Home","title":"CQDBasics.see_magnetic_fields","text":"see_magnetic_fields(plot_range::Tuple{<:Real, <:Real}, current::Real, zₐ::Real, Bᵣ::Vector{<:Real}, magnetic_field_computation_method::String, sigmoid_field::Union{String, Tuple{<:Real, <:Real}})\n\nVisualize the z component of the magnetic fields.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
